SELECT city, COUNT(breakfast_amount) AS BO,
SUM(breakfast_amount)/ COUNT(breakfast_amount) AS breakfast_basket,
SUM(amount)/ COUNT(amount) AS efood_basket,
COUNT(breakfast_amount)/ COUNT(DISTINCT breakfast_userid) AS breakfast_freq,
COUNT(order_id) / COUNT(DISTINCT UniqueIdPerCity) AS efood_freq,
COUNT(DISTINCT breakfast_3freq) / COUNT( DISTINCT breakfast_userid) AS breakfast_users3freq_per,
COUNT(DISTINCT efood_3freq) / COUNT( DISTINCT UniqueIdPerCity) AS efood_users3freq_per

FROM 
    (

SELECT *,    
CASE WHEN breakfast_userid IS NOT NULL THEN ROW_NUMBER() OVER (PARTITION BY breakfast_userid ORDER BY city,breakfast_userid) ELSE null END AS freq_breakfast,
CASE WHEN ROW_NUMBER() OVER (PARTITION BY breakfast_userid ORDER BY city,breakfast_userid) >3 THEN breakfast_userid ELSE null END AS breakfast_3freq,
FROM(
  SELECT *,
    CASE when cuisine like "%Breakfast%" THEN amount else null end AS breakfast_amount,
    CASE when cuisine like "%Breakfast%" THEN UniqueIdPerCity else null end AS breakfast_userid,
    ROW_NUMBER() OVER (PARTITION BY UniqueIdPerCity ORDER BY city, UniqueIdPerCity) freq,
    CASE WHEN ROW_NUMBER() OVER (PARTITION BY UniqueIdPerCity ORDER BY city,UniqueIdPerCity) >3 THEN UniqueIdPerCity ELSE null END AS efood_3freq,
    #ROW_NUMBER() OVER (PARTITION BY (CASE when cuisine like "%Breakfast%" THEN user_id else null end ) ORDER BY city) freq_breakfast,
    #CASE WHEN ROW_NUMBER() OVER (PARTITION BY breakfast_userid ORDER BY city,user_id) >3 THEN user_id ELSE null END AS breakfast_3freq,


    FROM (SELECT *, CONCAT(city,"_",user_id) AS UniqueIdPerCity FROM`efood-354312.main_assessment.orders`)
    WHERE city in (
      SELECT city#, COUNT(order_timestamp)
      FROM `efood-354312.main_assessment.orders` 
      GROUP BY city
      HAVING COUNT(order_id) >= 1000 ) 
    #ORDER BY freq_breakfast  
    )
   # where freq>3
    ORDER BY UniqueIdPerCity,freq, freq_breakfast  

    )   
GROUP BY city
ORDER BY BO DESC LIMIT 5
